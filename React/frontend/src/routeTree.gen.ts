/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotFoundImport } from './routes/notFound'
import { Route as PostsIdImport } from './routes/posts/$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const PostsIndexLazyImport = createFileRoute('/posts/')()

// Create/Update Routes

const NotFoundRoute = NotFoundImport.update({
  id: '/notFound',
  path: '/notFound',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexLazyRoute = PostsIndexLazyImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/index.lazy').then((d) => d.Route))

const PostsIdRoute = PostsIdImport.update({
  id: '/posts/$id',
  path: '/posts/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notFound': {
      id: '/notFound'
      path: '/notFound'
      fullPath: '/notFound'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/posts/$id': {
      id: '/posts/$id'
      path: '/posts/$id'
      fullPath: '/posts/$id'
      preLoaderRoute: typeof PostsIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/notFound': typeof NotFoundRoute
  '/posts/$id': typeof PostsIdRoute
  '/posts': typeof PostsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/notFound': typeof NotFoundRoute
  '/posts/$id': typeof PostsIdRoute
  '/posts': typeof PostsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/notFound': typeof NotFoundRoute
  '/posts/$id': typeof PostsIdRoute
  '/posts/': typeof PostsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/notFound' | '/posts/$id' | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/notFound' | '/posts/$id' | '/posts'
  id: '__root__' | '/' | '/notFound' | '/posts/$id' | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotFoundRoute: typeof NotFoundRoute
  PostsIdRoute: typeof PostsIdRoute
  PostsIndexLazyRoute: typeof PostsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotFoundRoute: NotFoundRoute,
  PostsIdRoute: PostsIdRoute,
  PostsIndexLazyRoute: PostsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notFound",
        "/posts/$id",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/notFound": {
      "filePath": "notFound.tsx"
    },
    "/posts/$id": {
      "filePath": "posts/$id.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
